generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(cuid())
  clerkUserId       String     @unique
  email             String     @unique
  googleFullName    String?
  googleImageUrl    String?
  googleVerifiedAt  DateTime   @default(now())
  customDisplayName String?
  isActive          Boolean    @default(true)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  lastLoginAt       DateTime   @default(now())
  totalCredits      Int        @default(8)
  usedCredits       Int        @default(0)
  adminLogs         AdminLog[]
  auditLogs         AuditLog[]
  purchases         Purchase[]
  videos            Video[]

  @@map("users")
}

model Purchase {
  id           String   @id @default(cuid())
  userId       String?
  packageType  String
  packageName  String
  amount       Float
  currency     String   @default("USD")
  creditsAdded Int
  productId    String?
  orderId      String?  @unique
  customerId   String?
  provider     String   @default("creem")
  status       String   @default("completed")
  createdAt    DateTime @default(now())
  completedAt  DateTime @default(now())
  paymentEmail String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model Video {
  id            String    @id @default(cuid())
  userId        String
  taskId        String?
  title         String
  type          String
  prompt        String
  status        String    @default("processing")
  videoUrl      String?
  videoUrl1080p String?
  thumbnailUrl  String?
  creditsUsed   Int       @default(10)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  completedAt   DateTime?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("videos")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model AdminLog {
  id         String   @id @default(cuid())
  userId     String?
  adminEmail String
  action     String
  oldValues  Json?
  newValues  Json?
  reason     String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("admin_logs")
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}
