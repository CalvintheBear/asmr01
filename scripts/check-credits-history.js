#!/usr/bin/env node

require('dotenv').config({ path: '.env.local' });
const { PrismaClient } = require('@prisma/client');

async function checkCreditsHistory() {
  const prisma = new PrismaClient();
  try {
    await prisma.$connect();
    console.log('üìä Ê£ÄÊü•ÁßØÂàÜÊ∂àËÄóÂéÜÂè≤...\n');
    
    // Êü•ÁúãÊâÄÊúâËßÜÈ¢ëËÆ∞ÂΩïÁöÑÁßØÂàÜÊ∂àËÄó
    const videos = await prisma.video.findMany({
      select: {
        id: true,
        creditsUsed: true,
        createdAt: true,
        status: true,
        user: {
          select: { email: true }
        }
      },
      orderBy: { createdAt: 'desc' }
    });
    
    console.log('üé• ÊâÄÊúâËßÜÈ¢ëÁöÑÁßØÂàÜÊ∂àËÄóËÆ∞ÂΩï:');
    videos.forEach((video, index) => {
      console.log(`${index + 1}. ${video.user.email} - ${video.creditsUsed}ÁßØÂàÜ - ${video.status} - ${video.createdAt.toLocaleString()}`);
    });
    
    // Êü•ÁúãÁßØÂàÜÊ∂àËÄóÁªüËÆ°
    console.log('\nüìà ÁßØÂàÜÊ∂àËÄóÁªüËÆ°:');
    const creditStats = {};
    videos.forEach(video => {
      const credits = video.creditsUsed;
      creditStats[credits] = (creditStats[credits] || 0) + 1;
    });
    
    Object.entries(creditStats).forEach(([credits, count]) => {
      console.log(`- ${credits}ÁßØÂàÜ: ${count}Ê¨°`);
    });
    
    // Êü•ÁúãÂÆ°ËÆ°Êó•Âøó‰∏≠ÁöÑÁßØÂàÜÁõ∏ÂÖ≥Êìç‰Ωú
    console.log('\nüìù ÁßØÂàÜÁõ∏ÂÖ≥ÁöÑÂÆ°ËÆ°Êó•Âøó:');
    const auditLogs = await prisma.auditLog.findMany({
      where: {
        OR: [
          { action: { contains: 'credit' } },
          { action: { contains: 'video' } },
          { action: { contains: 'manual' } }
        ]
      },
      orderBy: { createdAt: 'desc' },
      take: 10
    });
    
    auditLogs.forEach((log, index) => {
      console.log(`${index + 1}. ${log.action} - ${log.createdAt.toLocaleString()}`);
    });
    
  } catch (error) {
    console.error('‚ùå Ê£ÄÊü•Â§±Ë¥•:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkCreditsHistory(); 